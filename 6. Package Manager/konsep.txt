- Package manager merupakan tools yang dapat membantu pengelolaan package pada proyek agar lebih mudah.
- Selain itu, kita juga dapat menulis module/package untuk dikonsumsi secara publik.
- NPM adalah salah satu package manager yang banyak digunakan oleh JavaScript developer dalam mengelola package, selain NPM ada juga Yarn Package Manager.
- Keduanya, baik yarn atau npm, merupakan package manager yang dapat membantu kita dalam mengembangkan aplikasi web atau node. 
- Node Package Manager (NPM) merupakan pengelola package untuk JavaScript yang dapat memudahkan kita dalam mengelola package yang tersedia pada https://www.npmjs.com/. 
- NPM ini merupakan standard package manager yang disediakan oleh Node.js dan otomatis terpasang ketika memasang Node.js pada komputer kita.

- Untuk mengetahui helper pada NPM ketikan 'npm help'
- Lalu gunakan -h jika kita ingin melihat panduan penggunaan salah satu perintahnya. Contoh, Anda ingin melihat detail cara penggunaan perintah install, maka untuk melihatnya tuliskan perintah berikut: npm install -h.
- -h tidak hanya dapat digunakan pada perintah install saja, tetapi juga pada seluruh perintah lainnya yang ada pada NPM.
-  Aliases atau alias merupakan cara lain dalam melakukan perintah tersebut. Itu berarti perintah install dapat kita tuliskan dengan i, in, ins, isntal, add, install.


Installing Package
- Kita perlu tahu terlebih dulu bahwa ada dua jenis instalasi package, yaitu local install dan global install.
- Local package akan dipasang di dalam direktori atau folder yang sama dengan project kita. Package ini akan diletakkan di dalam folder node_modules.
- Sementara global package dipasang di satu tempat pada sistem perangkat kita (tergantung pengaturan pada saat instalasi node/npm).
- Untuk membuat poject baru ketikan keyword 'npm init' di folder project kita akan terdapat sebuah file baru bernama 'package.json'. Umumnya, semua package harus diinstal secara lokal. Ini memastikan setiap project atau aplikasi di komputer kita memiliki package dan versi yang sesuai dengan kebutuhan. 

- Lalu, kapan kita menggunakan global package? Sebuah package harus diinstal secara global hanya saat ia menyediakan perintah yang dapat dieksekusi dari CLI dan digunakan kembali di semua project. Beberapa contoh package yang perlu diinstal secara global, antara lain:
	1. npm
	2. nodemon
	3. mocha
- Untuk menginstal package secara global, kita cukup menambahkan parameter -g pada perintah npm install. Di mana -g berarti global. 'npm install -g <package-name>'


------------------------------------------------------------------
- Mari untuk mencoba tambahkan sebuah package. Sebagai contoh, kita akan menggunakan package lodash. Lodash adalah package yang berisi banyak utilitas untuk memudahkan kita dalam menulis kode JavaScript, khususnya yang berhubungan dengan array, object, string, dll.
- Jalankan perintah berikut pada terminal/command prompt Anda (pastikan perintah dijalankan di direktori project): 'npm install lodash'
- Setelah instalasi berhasil, buka dan periksa file package.json Anda. Akan muncul object baru dependencies berisi package yang telah kita tambahkan ke dalam project diikuti dengan versinya.
	"dependencies": {
	  "lodash": "^4.17.21"
	}
- Sebenarnya terdapat dua tipe object dependencies dalam berkas package.json. Yang pertama object dependencies dan yang kedua object devDependencies. Apa perbedaannya? Objek dependencies merupakan objek yang menampung package yang kita gunakan untuk membuat aplikasi. Sedangkan objek devDependencies digunakan untuk package yang berkaitan hanya saat proses pengembangan aplikasi, contohnya seperti package jest yang digunakan untuk testing. Package seperti jest ini hanya digunakan saat proses pengembangan aplikasi. Ia tidak digunakan lagi ketika aplikasi rilis atau digunakan langsung oleh pengguna.

- Untuk memasang package sebagai devDependencies, kita bisa menambahkan parameter --save-dev pada perintah npm install. Keyword 'npm install <package-name> --save-dev'
- Setelah package terpasang, maka akan ditambahkan ke berkas package.json.
	"devDependencies": {
	  "jest": "^26.6.3"
	}

- Di dalam project akan muncul berkas package-lock.json. Berkas ini secara otomatis dibuat oleh Node untuk menjelaskan susunan project dan package (suatu package bisa saja menggunakan package lainnya). Berkas package-lock.json juga mendefinisikan versi package yang digunakan dengan lebih spesifik. Apa maksudnya?
- Jika diperhatikan, pada file package.json kita menentukan versi dengan simbol caret (^). Selain caret, npm juga menggunakan simbol tilde (~). Keduanya digunakan untuk menentukan versi minor dan versi patch yang akan digunakan.
- Jadi, jika kita melihat versi ~1.0.2 itu berarti npm dapat menginstal versi 1.0.2 atau versi patch terbaru seperti 1.0.4. Jika versi package dituliskan dengan caret seperti ^1.0.2, itu berarti npm dapat menginstall versi 1.0.2 atau versi minor terbaru seperti 1.1.0 [6].
- File package-lock.json akan mendefinisikan secara spesifik mana versi yang akan digunakan.


Using Package
- Perlu kita pahami kembali bahwa package yang kita tambahkan ke dalam project sebenarnya adalah module. 
- Itulah kenapa di dalam project kita akan muncul juga folder node_modules. Di dalamnya berisi kode-kode JavaScript yang menyusun suatu package. 
- Jika Anda “berani”, Anda dapat melihat seperti apa kode di dalam package lodash.


Uninstall Package
-  Lalu, bagaimana caranya untuk menghapus package yang sudah tidak gunakan? Untuk melakukannya cukup mudah. Jika package berada pada objek dependencies, kita dapat menghapusnya menggunakan perintah: 'npm uninstall <package-name>'
- Jika package terdapat pada devDependencies, kita cukup menambahkan --save-dev di akhir perintahnya. 'npm uninstall <package-name> --save-dev'
- Contoh, jika kita ingin menghapus package lodash dari project, berarti tuliskan perintah: 'npm uninstall lodash' Dengan begitu, package lodash akan dihapus dari objek dependencies pada berkas package.json. Selain menghapus nilainya dari package.json, perintah tersebut juga akan menghapus semua berkas yang berhubungan dengan package lodash pada folder node_modules.

- Perintah uninstall juga memiliki beberapa alias, sehingga dapat lebih cepat dalam menuliskan perintahnya. Anda bisa melihat apa saja alias yang dapat digunakan dengan menjalankan perintah: 'npm uninstall -h'